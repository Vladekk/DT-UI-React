{"version":3,"sources":["components/TransportRouteSelector/TransportRouteSelector.module.css","App.module.css","components/ScheduleOneDirection/ScheduleOneDirection.module.css","services/DtUtils/DtUtils.ts","services/schedule.service.ts","environments/environment.ts","services/config.service.ts","components/Spinner/SpinnerContext.tsx","components/TransportRouteSelector/TransportRouteSelector.tsx","components/ScheduleOneDirection/ScheduleOneDirection.tsx","components/Spinner/Spinner.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ConversionDirection","DtUtils","date","direction","Date","getTime","getTimezoneOffset","ToUtc","ScheduleService","boundClass","configService","takeHowMuch","busNumber","fetch","this","ScheduleServiceUrl","headers","method","body","JSON","stringify","BusNumber","then","res","a","json","data","fixDates","routes","fromCenter","toCenter","map","getProperDate","slice","str","parse","GetRigaTzOffsetInMs","environment","ConfigService","SpinnerContext","React","createContext","loadingCounter","loading","isLoading","TransportRouteSelector","autobind","props","routesInCol","context","state","select","bind","service","GetAllRoutes","val","setState","selectedRoute","columnCount","Math","round","length","Fragment","className","styles","outerDiv","Dropdown","id","onSelect","key","event","preventDefault","Toggle","title","variant","Menu","Array","keys","i","style","float","toString","r","Item","item","eventKey","Number","value","routeNum","onRouteChange","Component","contextType","ScheduleOneDirection","routeInfos","now","intervalHandle","clearInterval","prevProps","prevState","snapshot","FetchScheduleForSelectedRoute","isFromCentralStation","handle","window","setInterval","row","schedule","afterNowRuns","filter","getHours","padEnd","getMinutes","IsClosestToNow","highlight","formatRow","GetScheduleInfo","infos","Spinner","color","el","document","createElement","children","appendChild","position","top","left","width","height","backgroundColor","display","marginLeft","marginRight","defaultProps","App","app","Provider","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15804ef4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"TransportRouteSelector_select__1zNGG\",\"outerDiv\":\"TransportRouteSelector_outerDiv__36YkC\",\"item\":\"TransportRouteSelector_item__2ZBsH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__18uvn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"to\":\"ScheduleOneDirection_to__2ht6A\",\"highlight\":\"ScheduleOneDirection_highlight__37THO\"};","export enum ConversionDirection {\r\n    ToUtc = -1,\r\n    FromUtc = 1\r\n}\r\n\r\nexport class DtUtils {\r\n    public static DateToUtcAndBack(date: Date, direction: ConversionDirection): Date {\r\n        // when we create new date, it will be in local timezone\r\n        // we need to switch to UTC to transfer it over json later\r\n        // to do this, we take offset in minutes, and multiply by 60, getting seconds, then by 1000\r\n        // this will get milliseconds. We can add ms to date object to shift it by offset\r\n        return new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000 * ((direction === ConversionDirection.ToUtc) ? 1 : -1));\r\n    }\r\n\r\n    public static GetRigaTzOffsetInMs() {\r\n        // const options = {\r\n        //     timeZone: 'Europe/Paris',\r\n        //     // tslint:disable-next-line:object-literal-sort-keys\r\n        //     year: 'numeric', month: 'numeric', day: 'numeric',\r\n        //     hour: 'numeric', minute: 'numeric', second: 'numeric',\r\n        // };\r\n        // const\r\n        //     formatter = new Intl.DateTimeFormat([], options);\r\n        return 3 * 1000 * 60 * 60;\r\n    }\r\n}\r\n","// import bind from 'bind-decorator';\nimport {Route} from './Route';\nimport {IGetScheduleInfo} from '../IGetScheduleInfo';\nimport {ConfigService} from \"./config.service\";\nimport {boundClass} from 'autobind-decorator'\nimport {DtUtils} from './DtUtils/DtUtils'\n\n@boundClass\nexport class ScheduleService implements IGetScheduleInfo {\n    constructor(private configService: ConfigService) {\n\n    }\n\n    private takeHowMuch = 4;\n\n    private static getProperDate(str: string): Date {\n        const date = new Date(Date.parse(str));\n        return new Date(date.getTime() - DtUtils.GetRigaTzOffsetInMs());\n\n    };\n\n\n    // constructor(\n    //     // private http: HttpClient, @Inject(forwardRef(() => ConfigService)) private configService: ConfigService,\n    //     //         @Inject(logServiceToken) private logService: ISimpleLogService\n    // ) {\n    //\n    //   this.routeDataSupplier = this.http.post<Route[]>(configService.ScheduleServiceUrl + 'GetAllRoutes', {}, {\n    //     headers:\n    //       {'Content-Type': 'application/json'}\n    //   });\n    // }\n    //\n\n    async GetScheduleInfo(busNumber: string): Promise<[Date[], Date[]]> {\n\n        return await fetch(this.configService.ScheduleServiceUrl + 'GetClosestRuns',\n            {\n                headers: {\n                    'Content-Type': 'application/json', 'Sec-Fetch-Site': 'cross-site'\n                },\n                method: 'post',\n                body: JSON.stringify({BusNumber: busNumber})\n            }\n        )\n            .then(async res => {\n                    let data = this.fixDates(await res.json());\n                    return data;\n                }\n            );\n    }\n\n    async GetAllRoutes(): Promise<Route[]> {\n        const routes: Response = await fetch(this.configService.ScheduleServiceUrl + 'GetAllRoutes',\n            {\n                headers: {\n                    'Content-Type': 'application/json', 'Sec-Fetch-Site': 'cross-site'\n                },\n                method: 'post',\n                body: '{}',\n\n            });\n        return routes.json();\n\n    }\n\n    private fixDates([fromCenter, toCenter]: [string[], string[]]) {\n        // this is hack to parse dates in json\n        const result: [Date[], Date[]] =\n            [fromCenter.map(ScheduleService.getProperDate).slice(0, this.takeHowMuch),\n                toCenter.map(ScheduleService.getProperDate).slice(0, this.takeHowMuch)];\n        return result;\n    };\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  expirationTtl : 3600,\n//   ScheduleServiceUrl: 'http://localhost:4000/api/',\n    ScheduleServiceUrl: 'https://upside.down.pictures/api/',\n  // SchedulePageUrl: 'http://satiksme.daugavpils.lv/autobuss-nr-17a-autoosta-csdd-jaunforstadte'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {environment} from '../environments/environment';\n\nexport class ConfigService {\n\n\n  ScheduleServiceUrl = environment.ScheduleServiceUrl;\n}\n\n","import React from \"react\";\r\n\r\n\r\n// noinspection JSUnusedLocalSymbols\r\nexport const SpinnerContext = React.createContext({\r\n    loadingCounter: 0, loading: (isLoading: boolean) => {\r\n    }\r\n});\r\n\r\n","import React from 'react';\r\nimport {ScheduleService} from \"../../services/schedule.service\";\r\nimport {ConfigService} from \"../../services/config.service\";\r\nimport {IRoute} from \"../../services/IRoute\";\r\nimport autobind from \"autobind-decorator\";\r\nimport {SpinnerContext} from \"../Spinner/SpinnerContext\";\r\nimport {Dropdown} from \"react-bootstrap\";\r\nimport styles from './TransportRouteSelector.module.css'\r\n\r\ntype Props = {\r\n    selectedRoute: string,\r\n    onRouteChange: (val: string) => void,\r\n\r\n}\r\n\r\n@autobind\r\nexport default class TransportRouteSelector extends React.Component<Props, { routes: IRoute[] }> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {routes: []};\r\n        this.select = this.select.bind(this);\r\n    }\r\n\r\n    routesInCol = 12;\r\n    static contextType = SpinnerContext;\r\n    context!: React.ContextType<typeof SpinnerContext>;\r\n\r\n    async componentDidMount() {\r\n\r\n        let service = new ScheduleService(new ConfigService());\r\n        this.context.loading(true\r\n        );\r\n        const val = await service.GetAllRoutes();\r\n        this.setState({routes: val});\r\n        this.select(this.props.selectedRoute);\r\n        this.context.loading(false);\r\n\r\n    }\r\n\r\n    render() {\r\n        const columnCount = Math.round(this.state.routes.length / this.routesInCol);\r\n        return <React.Fragment>\r\n            <div className={styles.outerDiv}>\r\n                <Dropdown id=\"dropdown-basic-button\" onSelect={(key: any, event: any) => {\r\n                    event.preventDefault();\r\n                    this.select(key);\r\n                }} className={styles.select}>\r\n\r\n                    <Dropdown.Toggle id=\"dropdown-basic\" title={this.props.selectedRoute} variant='warning'\r\n                                     className={styles.select}\r\n                    >\r\n                        {this.props.selectedRoute}\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n\r\n                        {\r\n\r\n                            [...Array(columnCount).keys()].map(i => {\r\n\r\n                                return <div style={{float: 'left'}} key={'col' + i.toString()}> {\r\n                                    this.state.routes.slice(i * this.routesInCol, (i + 1) * this.routesInCol).map((r) => {\r\n\r\n                                        return <Dropdown.Item className={styles.item} eventKey={r.Number}\r\n                                                              key={r.Number} value={r.Number}>\r\n                                            {r.Number}\r\n                                        </Dropdown.Item>;\r\n                                    })}</div>;\r\n\r\n\r\n                            })}\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </div>\r\n        </React.Fragment>;\r\n    }\r\n\r\n    private select(routeNum: string) {\r\n        this.props.onRouteChange(routeNum);\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport {ScheduleService} from \"../../services/schedule.service\";\r\nimport {ConfigService} from \"../../services/config.service\";\r\nimport styles from './ScheduleOneDirection.module.css'\r\nimport {SpinnerContext} from \"../Spinner/SpinnerContext\";\r\n\r\n\r\ntype Props = {\r\n    selectedRoute: string,\r\n    isFromCentralStation: boolean\r\n\r\n}\r\n\r\ntype State = { routeInfos: Date[], now: Date, intervalHandle: number };\r\n\r\nexport default class ScheduleOneDirection extends React.Component<Props, State> {\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {routeInfos: [], now: new Date(), intervalHandle: -1};\r\n\r\n    }\r\n\r\n    static contextType = SpinnerContext;\r\n    context!: React.ContextType<typeof SpinnerContext>;\r\n\r\n    componentWillUnmount(): void {\r\n        clearInterval(this.state.intervalHandle);\r\n    }\r\n\r\n    async componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any) {\r\n        if (prevProps.selectedRoute !== this.props.selectedRoute) {\r\n            await this.FetchScheduleForSelectedRoute(this.props.selectedRoute, this.props.isFromCentralStation);\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await this.FetchScheduleForSelectedRoute(this.props.selectedRoute, this.props.isFromCentralStation);\r\n        const handle = window.setInterval(() => this.setState({now: new Date()}), 1000);\r\n        this.setState({intervalHandle: handle})\r\n\r\n    }\r\n\r\n    IsClosestToNow(row: Date, schedule: Date[]) {\r\n        let afterNowRuns = schedule.filter(val => val >= this.state.now);\r\n        return afterNowRuns.length > 0 && afterNowRuns[0] === row;\r\n    }\r\n\r\n    formatRow(row: Date) {\r\n        return `${row.getHours().toString().padEnd(2, '0')}:${row.getMinutes().toString().padEnd(2, '0')}`\r\n    }\r\n\r\n    render() {\r\n        return <React.Fragment>\r\n            <h3>{this.props.isFromCentralStation ? \"From center\" : \"To center\"}</h3>\r\n            <ul>\r\n                {this.state.routeInfos.map(row => <li key={row.toString()}\r\n                                                      className={this.IsClosestToNow(row, this.state.routeInfos) ? styles.highlight : ''}>{this.formatRow(row)}</li>)}\r\n            </ul>\r\n        </React.Fragment>;\r\n\r\n    }\r\n\r\n    private async FetchScheduleForSelectedRoute(selectedRoute: string, isFromCentralStation: boolean) {\r\n        let service = new ScheduleService(new ConfigService());\r\n        // noinspection JSUnusedLocalSymbols\r\n        this.context.loading(true);\r\n        const val = await service.GetScheduleInfo(selectedRoute);\r\n        const infos = isFromCentralStation ? val[0] : val[1];\r\n        this.setState({routeInfos: infos});\r\n        this.context.loading(false);\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n","import React from \"react\";\r\n// @ts-ignore\r\nimport 'load-awesome-react-components/dist/misc/cog.css';\r\nimport {SpinnerContext} from \"./SpinnerContext\";\r\n\r\ntype Props = {\r\n\r\n};\r\nexport default class Spinner extends React.Component<Props, {}> {\r\n    style = {color: 'red'};\r\n    private readonly el: HTMLDivElement;\r\n    static defaultProps = {};\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.el = document.createElement('div');\r\n        document.children[0].appendChild(this.el);\r\n    }\r\n\r\n    static contextType = SpinnerContext;\r\n    context!: React.ContextType<typeof SpinnerContext>;\r\n\r\n    render() {\r\n        // noinspection CheckTagEmptyBody\r\n\r\n        const spinnerStyle = {\r\n            color: 'orange', marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n            width: '15vh',\r\n            height: '15vh',\r\n            top: '35vh'\r\n        };\r\n        // noinspection CheckTagEmptyBody\r\n        return <div style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            backgroundColor: 'rgba(0,0,0,0.6)',\r\n            display: (this.context.loadingCounter !== 0) ? \"block\" : \"none\"\r\n        }}>\r\n\r\n            <div style={spinnerStyle} className={'la-cog'}>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n","import React from 'react';\r\nimport styles from './App.module.css';\r\nimport TransportRouteSelector from \"./components/TransportRouteSelector/TransportRouteSelector\";\r\nimport ScheduleOneDirection from \"./components/ScheduleOneDirection/ScheduleOneDirection\";\r\nimport Spinner from \"./components/Spinner/Spinner\";\r\nimport autobind from 'autobind-decorator'\r\nimport {SpinnerContext} from \"./components/Spinner/SpinnerContext\";\r\n// import {ScheduleService} from \"./services/schedule.service\";\r\n// import {ConfigService} from \"./services/config.service\";\r\n\r\ntype State = {\r\n    selectedRoute: string,\r\n    isLoading: number\r\n};\r\ntype Props = {}\r\n\r\n@autobind\r\nexport default class App extends React.Component<{}, State> {\r\n\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedRoute: '17A', isLoading: 1\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.setState({selectedRoute: '17A'});\r\n        this.loading(false);\r\n    }\r\n\r\n    loading = (isLoading: Boolean) => this.setState((state) => {\r\n\r\n        return {isLoading: state.isLoading + (isLoading ? 1 : -1)};\r\n    });\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n\r\n            <div className={styles.app}>\r\n                <SpinnerContext.Provider\r\n                    value={{\r\n                        loadingCounter: this.state.isLoading,\r\n                        loading: this.loading\r\n                    }}>\r\n                    <Spinner/>\r\n\r\n                    <header className=\"App-header\">\r\n                        <TransportRouteSelector selectedRoute={this.state.selectedRoute}\r\n                                                onRouteChange={val => this.setState({selectedRoute: val})}\r\n                        />\r\n                        <ScheduleOneDirection isFromCentralStation={true} selectedRoute={this.state.selectedRoute}\r\n                        />\r\n                        <ScheduleOneDirection isFromCentralStation={false} selectedRoute={this.state.selectedRoute}\r\n                        />\r\n                        {/*\r\n            <app-route-selector (close)=\"suppressUpdates(false)\" (open)=\"suppressUpdates(true)\"></app-route-selector>\r\n<div class=\"row\">\r\n  <ul class=\"from\">\r\n    <li>From autoosta</li>\r\n    <li *ngFor=\"let row of fromCenterSchedule$ | async\" [ngClass]=\"{'highlight':row.IsClosest}\">\r\n      {{ (row.RunTime) | date:'shortTime' }}\r\n    </li>\r\n  </ul>\r\n</div>\r\n<div class=\"row\">\r\n  <ul class=\"to\">\r\n    <li>From end station</li>\r\n    <li *ngFor=\"let row of toCenterSchedule$ | async\" [ngClass]=\"{'highlight':row.IsClosest}\">\r\n      {{  [row.RunTime] | date:'shortTime' }}\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\n\r\n\r\n          */}\r\n                    </header>\r\n                </SpinnerContext.Provider>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}